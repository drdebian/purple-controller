# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://kedro.readthedocs.io/en/stable/05_data/01_data_catalog.html



raw_location:
  #type: IncrementalDataSet
  type: PartitionedDataSet
  dataset:
    type: pandas.CSVDataSet
    load_args:
      delimiter: ";"
      na_values: ["undefined", "null", "[object Object]"]
      keep_default_na: True
  filename_suffix: .csv
  path: data/01_raw/location
  #path: sftp:///var/local/NodeRed/location
  #credentials: my_remotessh_creds
  layer: raw

_raw_charger: &raw_charger
  #type: IncrementalDataSet
  type: PartitionedDataSet
  dataset:
    type: pandas.CSVDataSet
    load_args:
      delimiter: ";"
      na_values: ["undefined", "null", "[object Object]"]
      keep_default_na: True
  filename_suffix: .csv
  #path: sftp:///var/local/NodeRed/charger
  #credentials: my_remotessh_creds
  layer: raw

raw_charger1:
  <<: *raw_charger
  path: data/01_raw/charger/wallbox1

raw_charger2:
  <<: *raw_charger
  path: data/01_raw/charger/wallbox2

raw_charger3:
  <<: *raw_charger
  path: data/01_raw/charger/wallbox3

raw_charger4:
  <<: *raw_charger
  path: data/01_raw/charger/wallbox4

raw_charger5:
  <<: *raw_charger
  path: data/01_raw/charger/wallbox5

raw_charger6:
  <<: *raw_charger
  path: data/01_raw/charger/wallbox6


_raw_car: &raw_car
  #type: IncrementalDataSet
  type: PartitionedDataSet
  dataset:
    type: pandas.CSVDataSet
    load_args:
      delimiter: ";"
      na_values: ["undefined", "null", "[object Object]"]
      keep_default_na: True
  filename_suffix: .csv
  #path: sftp:///var/local/NodeRed/cars
  #credentials: my_remotessh_creds
  layer: raw

raw_car1:
  <<: *raw_car
  path: data/01_raw/cars/car1

raw_car2:
  <<: *raw_car
  path: data/01_raw/cars/car2

raw_car3:
  <<: *raw_car
  path: data/01_raw/cars/car3

raw_car4:
  <<: *raw_car
  path: data/01_raw/cars/car4

raw_car5:
  <<: *raw_car
  path: data/01_raw/cars/car5

raw_car6:
  <<: *raw_car
  path: data/01_raw/cars/car6

# raw_carsample1:
#   <<: *raw_car
#   path: data/01_raw/cars/sample1

# raw_carsample2:
#   <<: *raw_car
#   path: data/01_raw/cars/sample2




table_location:
  type: pandas.SQLTableDataSet
  credentials: my_sqlite_creds
  table_name: location
  save_args:
    if_exists: append
  layer: primary

_table_charger: &table_charger
  type: pandas.SQLTableDataSet
  credentials: my_sqlite_creds
  table_name: charger
  save_args:
    if_exists: append
  layer: primary

table_charger1:
  <<: *table_charger
  table_name: charger1

table_charger2:
  <<: *table_charger
  table_name: charger2

table_charger3:
  <<: *table_charger
  table_name: charger3

table_charger4:
  <<: *table_charger
  table_name: charger4

table_charger5:
  <<: *table_charger
  table_name: charger5

table_charger6:
  <<: *table_charger
  table_name: charger6


_table_car: &table_car
  type: pandas.SQLTableDataSet
  credentials: my_sqlite_creds
  table_name: car
  save_args:
    if_exists: append
  layer: primary

table_car1:
  <<: *table_car
  table_name: car1

table_car2:
  <<: *table_car
  table_name: car2

table_car3:
  <<: *table_car
  table_name: car3

table_car4:
  <<: *table_car
  table_name: car4

table_car5:
  <<: *table_car
  table_name: car5

table_car6:
  <<: *table_car
  table_name: car6

table_carsample1:
  <<: *table_car
  table_name: carsample1

table_carsample2:
  <<: *table_car
  table_name: carsample2


raw_config_lila:
  type: json.JSONDataSet
  filepath: sftp:///var/local/NodeRed/json/anlage.json
  credentials: my_remotessh_creds
  layer: raw

raw_config_cars:
  type: json.JSONDataSet
  filepath: sftp:///var/local/NodeRed/json/cars.json
  credentials: my_remotessh_creds
  layer: raw

# raw_config_lila:
#   type: json.JSONDataSet
#   filepath: conf/base/anlage.json
#   layer: raw

# raw_config_cars:
#   type: json.JSONDataSet
#   filepath: conf/base/car_scheme.json
#   layer: raw


data_ready:
  type: pickle.PickleDataSet
  filepath: data/03_primary/data_ready.pickle

processed_pv_data:
  type: pickle.PickleDataSet
  filepath: data/03_primary/processed_pv_data.pickle

processed_ev_data:
  type: pickle.PickleDataSet
  filepath: data/03_primary/processed_ev_data.pickle



ev_data:
  type: pandas.SQLQueryDataSet
  credentials: my_sqlite_creds
  filepath: src/sqlstatements/cars_15min_avg_with_chargers.sql
  load_args:
    index_col: ['vehicle', 'timestamp']
  layer: primary

charger_data:
  type: pandas.SQLQueryDataSet
  credentials: my_sqlite_creds
  filepath: src/sqlstatements/chargers_15min_avg.sql
  load_args:
    index_col: ['station', 'timestamp']
  layer: primary

location_data:
  type: pandas.SQLQueryDataSet
  credentials: my_sqlite_creds
  filepath: src/sqlstatements/location_15min_avg.sql
  load_args:
    index_col: ['timestamp']
  layer: primary


solved_direct_model:
  type: pickle.PickleDataSet
  filepath: data/06_models/solved_direct_model.pickle
  layer: models

direct_solution_results:
  type: pickle.PickleDataSet
  filepath: data/07_model_output/direct_solution.pickle
  versioned: True
  layer: model_output

direct_solution_plot:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/direct_solution.png
  versioned: True
  layer: reporting


solved_rule_model:
  type: pickle.PickleDataSet
  filepath: data/06_models/solved_rule_model.pickle
  layer: models

rule_solution_results:
  type: pickle.PickleDataSet
  filepath: data/07_model_output/rule_solution.pickle
  versioned: True
  layer: model_output

rule_solution_plot:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/rule_solution.png
  versioned: True
  layer: reporting




# ev_charge_limits:
#   type: pandas.JSONDataSet
#   filepath: data/07_model_output/ev_charge_limits.json
#   layer: model_output

ev_charge_limits:
  type: pandas.JSONDataSet
  filepath: sftp:///var/local/NodeRed/commands/car_charge_limits.json
  credentials: my_remotessh_creds
  layer: model_output


_table_result: &table_result
  type: pandas.SQLTableDataSet
  credentials: my_sqlite_creds
  save_args:
    if_exists: append
  layer: model_output

table_result0:
  <<: *table_result
  table_name: result0

table_result1:
  <<: *table_result
  table_name: result1

table_result2:
  <<: *table_result
  table_name: result2


table_result0_rule:
  <<: *table_result
  table_name: result0_rule

table_result1_rule:
  <<: *table_result
  table_name: result1_rule

table_result2_rule:
  <<: *table_result
  table_name: result2_rule



_table_maxtimedate: &table_maxtimedate
  type: pandas.SQLQueryDataSet
  credentials: my_sqlite_creds
  layer: intermediate

table_maxtimedate_car1:
  <<: *table_maxtimedate
  sql: "select max(TimeDate) as mtd from car1;"

table_maxtimedate_car2:
  <<: *table_maxtimedate
  sql: "select max(TimeDate) as mtd from car2;"

table_maxtimedate_car3:
  <<: *table_maxtimedate
  sql: "select max(TimeDate) as mtd from car3;"

table_maxtimedate_car4:
  <<: *table_maxtimedate
  sql: "select max(TimeDate) as mtd from car4;"

table_maxtimedate_car5:
  <<: *table_maxtimedate
  sql: "select max(TimeDate) as mtd from car5;"

table_maxtimedate_charger1:
  <<: *table_maxtimedate
  sql: "select max(TimeDate) as mtd from charger1;"

table_maxtimedate_charger2:
  <<: *table_maxtimedate
  sql: "select max(TimeDate) as mtd from charger2;"

table_maxtimedate_charger3:
  <<: *table_maxtimedate
  sql: "select max(TimeDate) as mtd from charger3;"

table_maxtimedate_charger4:
  <<: *table_maxtimedate
  sql: "select max(TimeDate) as mtd from charger4;"

table_maxtimedate_charger5:
  <<: *table_maxtimedate
  sql: "select max(TimeDate) as mtd from charger5;"

table_maxtimedate_location:
  <<: *table_maxtimedate
  sql: "select max(TimeDate) as mtd from location;"
